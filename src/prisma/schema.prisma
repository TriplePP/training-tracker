generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id          String       @id @default(cuid())
  username    String       @unique
  firstname   String
  lastname    String
  email       String       @unique
  password    String?
  role        String       @default("student") // or "trainer"
  enrollments Enrollment[]
  courses     Course[]     @relation("TrainerCourses")

  // NextAuth.js fields
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
}

model Course {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  icon        String
  trainerId   String
  trainer     User         @relation("TrainerCourses", fields: [trainerId], references: [id])
  enrollments Enrollment[]
}

model Enrollment {
  id       Int    @id @default(autoincrement())
  userId   String
  courseId Int
  status   String @default("booked")

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}
